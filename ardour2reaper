#!/usr/bin/python2

import xml.dom.minidom


def parse_ided(parent_element, tag_name, the_class, the_dict):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element)
		the_dict[obj.id] = obj

def parse_named(parent_element, tag_name, the_class, the_dict):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element)
		the_dict[obj.name] = obj

def parse_list(parent_element, tag_name, the_class, the_list):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element)
		the_list.append(obj)

def bool_attribute(element, name):
	return element.getAttribute(name) == "yes"

def dump_ided(the_dict):
	for obj in the_dict.values():
		obj.dump()

def dump_named(the_dict):
	for obj in the_dict.values():
		obj.dump()

def dump_list(the_list):
	for obj in the_list:
		obj.dump()

def bool_dump(value, name):
	return name if value else "un" + name

def quote(str):
	return "\"" + str + "\""


class Marker:
	def __init__(self, element):
		self.name = element.getAttribute("name")
		self.start = int(element.getAttribute("start"))
		self.end = int(element.getAttribute("end"))
		self.locked = bool_attribute(element, "locked")

	def dump(self):
		print self.name, self.start, self.end, ("Locked" if self.locked else "Unlocked")


class Source:
	def __init__(self, element):
		self.id = int(element.getAttribute("id"))
		self.name = element.getAttribute("name")
	
	def dump(self):
		print self.id, quote(self.name)


class Diskstream:
	def __init__(self, element):
		self.id = int(element.getAttribute("id"))
		self.playlist = element.getAttribute("playlist")
		self.name = element.getAttribute("name")
	
	def dump(self):
		print self.id, quote(self.playlist), quote(self.name)


class Region:
	def __init__(self, element):
		self.id = int(element.getAttribute("id"))
		self.name = element.getAttribute("name")
		self.start = int(element.getAttribute("start"))
		self.length = int(element.getAttribute("length"))
		self.position = int(element.getAttribute("position"))
		self.source = int(element.getAttribute("source-0"))

	def dump(self):
		print self.id, quote(self.name), self.start, self.length, "pos:", self.position, "source:", self.source


class Playlist:
	def __init__(self, element):
		self.name = element.getAttribute("name")
		self.regions = {}
		parse_ided(element, "Region", Region, self.regions)

	def dump(self):
		print self.name + ":"
		dump_ided(self.regions)
		print "-----"


class Route:
	def parse_order(self, element):
		order_attr = element.getAttribute("order-keys")
		if not order_attr:
			return 0
		for key_val in order_attr.split(":"):
			pair = key_val.split("=")
			key = pair[0]
			value = pair[1]
			if key == "editor":
				return int(value)

	def __init__(self, element):
		self.name = ""
		self.gain = 1.0
		self.pan = 0.5
		self.muted = bool_attribute(element, "muted")
		self.soloed = bool_attribute(element, "soloed")
		self.inverted = bool_attribute(element, "phase-invert")
		self.order = self.parse_order(element)
		self.diskstreamID = 0
		diskstream_id = element.getAttribute("diskstream-id")
		if diskstream_id:
			self.diskstreamID = int(element.getAttribute("diskstream-id"))
		for child in element.childNodes:
			if child.nodeType != xml.dom.Node.ELEMENT_NODE:
				continue
			tag_name = child.tagName
			if tag_name == "IO":
				outputs = child.getAttribute("outputs")
				if ("{master/" in outputs) or (child.getAttribute("name") == "master"):
					self.name = child.getAttribute("name")
					self.gain = float(child.getAttribute("gain"))
					panner = child.getElementsByTagName("Panner")[0]
					if panner:
						stream_panner = panner.getElementsByTagName("StreamPanner")[0]
						if stream_panner:
							self.pan = float(stream_panner.getAttribute("x"))

	def dump(self):
		print self.name, "[" + str(self.order) + "]:", self.diskstreamID, self.gain, self.pan
		print " ", bool_dump(self.muted, "muted"), bool_dump(self.soloed, "soloed"), bool_dump(self.inverted, "inverted")


class Session:
	def parse_markers(self, element):
		for marker_elt in element.childNodes:
			if marker_elt.nodeType != xml.dom.Node.ELEMENT_NODE:
				continue
			if marker_elt.tagName != "Location":
				continue
			if not "IsMark" in marker_elt.getAttribute("flags"):
				continue
			self.markers.append(Marker(marker_elt))
	
	def dump(self):
		print "Sample rate:", self.sample_rate
		print "Markers:"
		for marker in self.markers:
			marker.dump()
		print "\nSources:"
		dump_ided(self.sources)
		print "\nRegions:"
		dump_ided(self.regions)
		print "\nDiskstreams:"
		dump_ided(self.diskstreams)
		print "\nPlaylists:"
		dump_named(self.playlists)
		print "\nRoutes:"
		dump_list(self.routes)

	def __init__(self, filename):
		self.markers = []
		self.sources = {}
		self.regions = {}
		self.diskstreams = {}
		self.playlists = {}
		self.routes = []

		doc = xml.dom.minidom.parse(filename)
		session = doc.documentElement
		self.sample_rate = int(session.getAttribute("sample-rate"))
		element = session.firstChild
		while element:
			if element.nodeType == xml.dom.Node.ELEMENT_NODE:
				name = element.tagName
				if name == "Locations":
					self.parse_markers(element)
				elif name == "Sources":
					parse_ided(element, "Source", Source, self.sources)
				elif name == "Regions":
					parse_ided(element, "Region", Region, self.regions)
				elif name == "DiskStreams":
					parse_ided(element, "AudioDiskstream", Diskstream, self.diskstreams)
				elif name == "Playlists":
					parse_named(element, "Playlist", Playlist, self.playlists)
				elif name == "Routes":
					parse_list(element, "Route", Route, self.routes)
			element = element.nextSibling

		self.routes.sort(key = lambda route: route.order)


def convert(filename):
	session = Session(filename);
	session.dump()

convert("Radio Chris.ardour")

