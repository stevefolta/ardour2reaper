#!/usr/bin/python2

import xml.dom.minidom
import sys, uuid
from collections import deque


def show_usage():
	print "Usage: ardour2reaper [-d] <file>..."
	print "  -d  Dump session info instead of converting."


def parse_ided(parent_element, tag_name, the_class, the_dict, session):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element, session)
		the_dict[obj.id] = obj

def parse_named(parent_element, tag_name, the_class, the_dict, session):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element, session)
		the_dict[obj.name] = obj

def parse_list(parent_element, tag_name, the_class, the_list, session):
	for element in parent_element.childNodes:
		if element.nodeType != xml.dom.Node.ELEMENT_NODE:
			continue
		if element.tagName != tag_name:
			continue
		obj = the_class(element, session)
		the_list.append(obj)

def bool_attribute(element, name):
	return element.getAttribute(name) == "yes"

def dump_ided(the_dict):
	for obj in the_dict.values():
		obj.dump()

def dump_named(the_dict):
	for obj in the_dict.values():
		obj.dump()

def dump_list(the_list):
	for obj in the_list:
		obj.dump()

def bool_dump(value, name):
	return name if value else "un" + name

def quote(str):
	return "\"" + str + "\""


class Marker:
	def __init__(self, element, session):
		self.name = element.getAttribute("name")
		self.start = int(element.getAttribute("start"))
		self.end = int(element.getAttribute("end"))
		self.locked = bool_attribute(element, "locked")

	def dump(self):
		print self.name, self.start, self.end, ("Locked" if self.locked else "Unlocked")


class Source:
	def __init__(self, element, session):
		self.id = int(element.getAttribute("id"))
		self.name = element.getAttribute("name")
	
	def dump(self):
		print self.id, quote(self.name)


class Diskstream:
	def __init__(self, element, session):
		self.id = int(element.getAttribute("id"))
		self.playlist = element.getAttribute("playlist")
		self.name = element.getAttribute("name")
	
	def dump(self):
		print self.id, quote(self.playlist), quote(self.name)


class Region:
	def __init__(self, element, session):
		self.id = int(element.getAttribute("id"))
		self.name = element.getAttribute("name")
		self.start = int(element.getAttribute("start"))
		self.length = int(element.getAttribute("length"))
		self.position = int(element.getAttribute("position"))
		self.source = int(element.getAttribute("source-0"))

	def dump(self):
		print self.id, quote(self.name), self.start, self.length, "pos:", self.position, "source:", self.source


class Playlist:
	def __init__(self, element, session):
		self.name = element.getAttribute("name")
		self.regions = {}
		self.session = session
		parse_ided(element, "Region", Region, self.regions, session)

	def dump(self):
		print self.name + ":"
		dump_ided(self.regions)
		print "-----"


class Plugin:
	def __init__(self, element, session):
		self.name = ""
		redirect = element.getElementsByTagName("Redirect")[0]
		if redirect:
			io = redirect.getElementsByTagName("IO")[0]
			if io:
				self.name = io.getAttribute("name")
	
	def dump(self):
		print "   ", self.name


class Route:
	def __init__(self, element, session):
		self.session = session
		self.name = ""
		self.gain = 1.0
		self.pan = 0.5
		self.muted = bool_attribute(element, "muted")
		self.soloed = bool_attribute(element, "soloed")
		self.inverted = bool_attribute(element, "phase-invert")
		self.order = self.parse_order(element)
		self.plugins = []
		self.diskstreamID = 0
		diskstream_id = element.getAttribute("diskstream-id")
		if diskstream_id:
			self.diskstreamID = int(element.getAttribute("diskstream-id"))
		for child in element.childNodes:
			if child.nodeType != xml.dom.Node.ELEMENT_NODE:
				continue
			tag_name = child.tagName
			if tag_name == "IO":
				outputs = child.getAttribute("outputs")
				if ("{master/" in outputs) or (child.getAttribute("name") == "master"):
					self.name = child.getAttribute("name")
					self.gain = float(child.getAttribute("gain"))
					panner = child.getElementsByTagName("Panner")[0]
					if panner:
						stream_panner = panner.getElementsByTagName("StreamPanner")[0]
						if stream_panner:
							self.pan = float(stream_panner.getAttribute("x"))
			elif tag_name == "Insert":
				self.plugins.append(Plugin(child, self.session))

	def parse_order(self, element):
		order_attr = element.getAttribute("order-keys")
		if not order_attr:
			return 0
		for key_val in order_attr.split(":"):
			pair = key_val.split("=")
			key = pair[0]
			value = pair[1]
			if key == "editor":
				return int(value)

	def emit_rpp(self, out):
		# Skip master, that's handled separately.
		if self.name == "master":
			return

		# Emit.
		fmt_vars = { "track": self }
		fmt_vars["guid"] = "{" + str(uuid.uuid4()) + "}"
		fmt_vars["pan"] = self.pan * 2.0 - 1.0
			# Ardour pans are 0.0 - 1.0 (0.5 at center), Reaper is -1.0 - 1.0 (0.0 center)
		fmt_vars["polarity"] = 1 if self.inverted else 0
		print >> out, track_header.format(**fmt_vars)
		print >> out, track_footer

		# Show unconverted elements.
		for plugin in self.plugins:
			self.session.unconverted.append(
				"Plugin \"{0}\" on track \"{1}\"".format(
					plugin.name, self.name))

	@property
	def muted_int(self):
		return 1 if self.muted else 0

	def dump(self):
		print self.name, "[" + str(self.order) + "]:", self.diskstreamID, self.gain, self.pan
		print " ", bool_dump(self.muted, "muted"), bool_dump(self.soloed, "soloed"), bool_dump(self.inverted, "inverted")
		if len(self.plugins) > 0:
			print "  Plugins:"
			for plugin in self.plugins:
				plugin.dump()


class Session:
	def __init__(self, filename):
		self.markers = []
		self.sources = {}
		self.regions = {}
		self.diskstreams = {}
		self.playlists = {}
		self.routes = []
		self.unconverted = []

		doc = xml.dom.minidom.parse(filename)
		session = doc.documentElement
		self.sample_rate = int(session.getAttribute("sample-rate"))
		element = session.firstChild
		while element:
			if element.nodeType == xml.dom.Node.ELEMENT_NODE:
				name = element.tagName
				if name == "Locations":
					self.parse_markers(element)
				elif name == "Sources":
					parse_ided(element, "Source", Source, self.sources, self)
				elif name == "Regions":
					parse_ided(element, "Region", Region, self.regions, self)
				elif name == "DiskStreams":
					parse_ided(element, "AudioDiskstream", Diskstream, self.diskstreams, self)
				elif name == "Playlists":
					parse_named(element, "Playlist", Playlist, self.playlists, self)
				elif name == "Routes":
					parse_list(element, "Route", Route, self.routes, self)
			element = element.nextSibling

		self.routes.sort(key = lambda route: route.order)

	def parse_markers(self, element):
		for marker_elt in element.childNodes:
			if marker_elt.nodeType != xml.dom.Node.ELEMENT_NODE:
				continue
			if marker_elt.tagName != "Location":
				continue
			if not "IsMark" in marker_elt.getAttribute("flags"):
				continue
			self.markers.append(Marker(marker_elt, self))

	def emit_rpp(self, out):
		fmt_vars = { 'project': self }
		print >> out, project_header.format(**fmt_vars)
		for track in self.routes:
			track.emit_rpp(out)
		print >> out, project_footer
	
	def dump(self):
		print "Sample rate:", self.sample_rate
		print "Markers:"
		for marker in self.markers:
			marker.dump()
		print "\nSources:"
		dump_ided(self.sources)
		print "\nRegions:"
		dump_ided(self.regions)
		print "\nDiskstreams:"
		dump_ided(self.diskstreams)
		print "\nPlaylists:"
		dump_named(self.playlists)
		print "\nRoutes:"
		dump_list(self.routes)


def convert(filename):
	session = Session(filename)
	split_name = filename.rsplit(".", 1)
	if len(split_name) == 1:
		split_name.append("RPP")
	else:
		split_name[-1] = "RPP"
	out_filename = ".".join(split_name)
	out = open(out_filename, "w")
	session.emit_rpp(out)
	if len(session.unconverted) > 0:
		print "Unconverted in \"{0}\":".format(filename)
		for item in session.unconverted:
			print "  ", item

def dump_session(filename):
	session = Session(filename)
	session.dump()


project_header = """
<REAPER_PROJECT 0.1 "4.14/OSX"
  RIPPLE 0
  GROUPOVERRIDE 0 0 0
  AUTOXFADE 1
  ENVATTACH 1
  MIXERUIFLAGS 11 48
  PEAKGAIN 1.00000000000000
  FEEDBACK 0
  PANLAW 1.00000000000000
  PROJOFFS 0.00000000000000 0
  MAXPROJLEN 0 600.00000000000000
  GRID 11390 8 1.00000000000000 8 1.00000000000000 0
  TIMEMODE 0 0 -1
  PANMODE 3
  CURSOR 0
  ZOOM 5.40878929413776 0 0
  VZOOMEX 3
  USE_REC_CFG 0
  RECMODE 1
  SMPTESYNC 0 23.976024 100 40 1000 300 0 0.000000 1
  LOOP 0
  LOOPGRAN 0 4.00000000000000
  RECORD_PATH "Audio" ""
  <RECORD_CFG
    ZXZhdxgA
  >
  <APPLYFX_CFG
  >
  RENDER_FILE "Audio/untitled.wav"
  RENDER_FMT 0 2 0
  RENDER_1X 0
  RENDER_RANGE 2 0.00000000000000 0.00000000000000
  RENDER_RESAMPLE 3 0 1
  RENDER_ADDTOPROJ 0
  RENDER_STEMS 0
  RENDER_DITHER 0
  TIMELOCKMODE 0
  ITEMMIX 0
  DEFPITCHMODE 393216
  TAKELANE 0
	SAMPLERATE {project.sample_rate} 0 0
  <RENDER_CFG
  >
  LOCK 1
  <METRONOME 6 2.000000
    VOL 0.250000 0.125000
    FREQ 800 1600 0
    BEATLEN 4
    SAMPLES "" ""
  >
  GLOBAL_AUTO -1
  TEMPO 120.00000000000000 4 4
  PLAYRATE 1.00000000000000 0 0.25000 4.00000
  SELECTION 0.00000000000000 0.00000000000000
  SELECTION2 0.00000000000000 0.00000000000000
  MASTERAUTOMODE 0
  MASTERTRACKHEIGHT 0
  MASTERMUTESOLO 0
  MASTERTRACKVIEW 1 0.666700 0.500000 0.500000 -1 -1 -1
  MASTERHWOUT 0 0 1.00000000000000 0.00000000000000 0 0 0 -1.00000000000000
  MASTER_NCH 2 2
  MASTER_VOLUME 1.00000000000000 0.00000000000000 -1.00000000000000 -1.00000000000000 1.00000000000000
  MASTER_PANMODE -1
  MASTER_FX 1
  MASTER_SEL 0
  <MASTERFXLIST
    WNDRECT 50 313 724 387
    SHOW 0
    LASTSEL 0
    DOCKED 0
  >
  <MASTERPLAYSPEEDENV
    ACT 0
    VIS 0 1 1.000000
    LANEHEIGHT 0 0
    ARM 0
    DEFSHAPE 0 -1 -1
  >
  <TEMPOENVEX
    ACT 0
    VIS 1 0 1.000000
    LANEHEIGHT 0 0
    ARM 0
    DEFSHAPE 1 -1 -1
  >
  <PROJBAY
  >"""

project_footer = ">"

track_header = """
  <TRACK '{guid}'
    NAME "{track.name}"
    PEAKCOL 16576
    BEAT -1
    AUTOMODE 1
    VOLPAN {track.gain} {pan} -1.00000000000000 -1.00000000000000 1.00000000000000
    MUTESOLO {track.muted_int} 0 0
    IPHASE {polarity}
    ISBUS 0 0
    BUSCOMP 0 0
    SHOWINMIX 1 0.666700 0.500000 1 0.500000 -1 -1 -1
    FREEMODE 0
    SEL 0
    REC 0 2 0 0 0 0 0
    VU 2
    TRACKHEIGHT 0 0
    INQ 0 0 0 0.5000000000 100 0 0 100
    NCHAN 2
    FX 1
    TRACKID {guid}
    PERF 0
    MIDIOUT -1
    MAINSEND 1 0"""
track_footer = """	>"""


args = deque(sys.argv)
args.popleft()
dumping = False
did_something = False
while len(args) > 0:
	arg = args.popleft()
	if arg == "-d":
		dumping = True
	elif arg == "--help":
		show_usage()
	else:
		if dumping:
			dump_session(arg)
		else:
			convert(arg)
		did_something = True
if not did_something:
	show_usage()
			

